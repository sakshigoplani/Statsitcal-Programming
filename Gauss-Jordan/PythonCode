import numpy as np

def mySweep(B, m):
    A = np.copy(B)
    n, c = A.shape
    Det = 1
    if A.shape[0] != A.shape[1]:
        print 'Enter a square matrix'
    for k in range(m):
        Det = Det * (A[k,k])
        if abs(A[k,k]) < 0.005:
            print 'Matrix is not invertible'
            return A 
        
        for i in range(n):
            for j in range(n):
                if i != k and j != k:
                    A[i,j] = A[i,j]- A[i,k]*A[k,j]/A[k,k]

        for i in range(n):
            if i != k:
                A[i,k] = A[i,k]/A[k,k]

        for j in range(n):
            if j != k:
                A[k,j] = A[k,j]/A[k,k]

        A[k,k] = -1/A[k,k]    
    
    print 'Determinant' + str(Det)        
    return A
    

def reverseSweep(B,m):
    A = np.copy(B)
    n, c = A.shape
    for k in range(m):
        for i in range(n):
            for j in range(n):
                if i != k and j != k:
                    A[i,j] = A[i,j]- A[i,k]*A[k,j]/A[k,k]

        for i in range(n):
            if i != k:
                A[i,k] = -A[i,k]/A[k,k]

        for j in range(n):
            if j != k:
                A[k,j] = -A[k,j]/A[k,k]

        A[k,k] = -1/A[k,k]
    return A


def myGaussJordan(A, m):
    n = A.shape[0]
    B  = np.hstack((A, np.identity(n)))
    if A.shape[0] != A.shape[1]:
        print 'Enter a square matrix'
    for k in range(m):
        if abs(B[k,k]) < 0.005:
            print 'Matrix is not invertible'
            return 
        a = B[k, k]
        for j in range(n*2):
            B[k, j] = B[k, j] / a
        for i in range(n):
            if i != k:
                a = B[i, k]
                for j in range(n*2):
                    B[i, j] = B[i, j] - B[k, j]*a;                                
    return B

def myGaussJordanVec(A, m):
    n = A.shape[0]
    B  = np.hstack((A, np.identity(n)))
    if A.shape[0] != A.shape[1]:
        print 'Enter a square matrix'
    for k in range(m):
        if abs(B[k,k]) < 0.005:
            print 'Matrix is not invertible'
            return 
        B[k, :] = B[k, ] / B[k, k]
        for i in range(n):
            if i != k:
                B[i, ] = B[i, ] - B[k, ]*B[i, k];
    return B

A = np.array([[1,2,3],[7,11,13],[17,21,23]], dtype=float).T
print 'Original Matrix'
print A
C = mySweep(A, 3)
print 'Matrix after Sweep'
print C
print 'Matrix after Reverse Sweep'
print reverseSweep(C, 3)
print 'Matrix after Gauss Jordan Sweep'
print myGaussJordan(A, 3)
print 'Matrix after Vectorized Gauss Jordan Sweep'
print myGaussJordanVec(A, 3)
