mySweep <- function(A, m)
{
  n <- dim(A)[1]
  Det <- 1
  if (dim(A)[1]!=dim(A)[2])
  print('Enter a square matrix')
  for (k in 1:m)
  {
    Det = Det * (A[k,k])
  if (abs(A[k,k]) < 0.005)
    return ("Matrix is not invertible")
    for (i in 1:n)     
      for (j in 1:n)   
        if (i!=k  & j!=k)     
          A[i,j] <- A[i,j] - A[i,k]*A[k,j]/A[k,k]    
    
    for (i in 1:n) 
      if (i!=k) 
        A[i,k] <- A[i,k]/A[k,k]  
    
    for (j in 1:n) 
      if (j!=k) 
        A[k,j] <- A[k,j]/A[k,k]  
    
    A[k,k] <- - 1/A[k,k] 
  }
  print("Determinant is:")
  print (Det)
  return(A)
}




reverseSweep <- function(A, m)
{
  n <- dim(A)[1]
  
  for (k in 1:m) 
  {
    for (i in 1:n)     
      for (j in 1:n)   
        if (i!=k  & j!=k)     
          A[i,j] <- A[i,j] - A[i,k]*A[k,j]/A[k,k]    
    
    for (i in 1:n) 
      if (i!=k) 
        A[i,k] <- -(A[i,k]/A[k,k]) 
    
    for (j in 1:n) 
      if (j!=k) 
        A[k,j] <- -(A[k,j]/A[k,k])  
    
    A[k,k] <- - 1/A[k,k] 
  }
  return(A)
}


myGaussJordan <- function(A, m)
{
  n <- dim(A)[1]
  B <- cbind(A, diag(rep(1, n)))
  Det <- 1
  if (dim(A)[1]!=dim(A)[2])
    print('Enter a square matrix')
  for (k in 1:m) 
  {
    Det = Det * (B[k,k])
    if (abs(B[k,k]) < 0.005)
      return ("Matrix is not invertible")
    a <- B[k, k]
    for (j in 1:(n*2))     
      B[k, j] <- B[k, j]/a
    for (i in 1:n)
      if (i != k)
      {
        a <- B[i, k]
        for (j in 1:(n*2))
          B[i, j] <- B[i, j] - B[k, j]*a; 
      }    
  }
  return(B)
}


myGaussJordanVec <- function(A, m)
{
  n <- dim(A)[1]
  B <- cbind(A, diag(rep(1, n)))
  Det <- 1
  if (dim(A)[1]!=dim(A)[2])
    print('Enter a square matrix')
  for (k in 1:m) 
  {
    Det = Det * (B[k,k])
    if (abs(B[k,k]) < 0.005)
      return ("Matrix is not invertible")
    B[k, ] <- B[k, ]/B[k, k]
    for (i in 1:n)
      if (i != k)
        B[i, ] <- B[i, ] - B[k, ]*B[i, k];   
  }
  return(B)
}

print ("Original Matrix:")
print (A)
A = matrix(c(1,2,3,7,11,13,17,21,23), 3,3)
print ("Matrix after performing Sweep:")
solve(A)
C <- mySweep(A,3)
print ("Matrix after performing Reverse Sweep:")
reverseSweep(C,3)
A = matrix(c(1,2,3,7,11,13,17,21,23), 3,3)
print ("Matrix after performing Gauss Jordan:")
solve(A)
myGaussJordan(A,3)
A = matrix(c(1,2,3,7,11,13,17,21,23), 3,3)
print ("Matrix after performing vectorized Gauss Jordan:")
solve(A)
myGaussJordanVec(A,3)

