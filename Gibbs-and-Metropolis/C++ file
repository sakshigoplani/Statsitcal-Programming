#include <RcppArmadillo.h>
#include <RcppArmadilloExtensions/sample.h>
//[[Rcpp::depends(RcppArmadillo)]]
using namespace Rcpp;


// [[Rcpp::export]]
arma::vec runifC(double seed, int n) {
  
  double x = seed; 
  arma::vec u(n);  
                   
    for(int i = 0; i < n; ++i){                                      
    x = fmod(pow(7,5) * x, pow(2,31) - 1.0);     
    u[i] = x / (pow(2,31) - 1.0);   
  }                                 
  
  return(u); 
  
}




// [[Rcpp::export]]
arma::vec rnormC(double seed, int n) {
  
double pi = 3.141592653589793238462643383280; 
double theta; 
double r;
arma::vec u(2);     
arma::vec v(2 * n); 
for(int i = 0; i < n; ++i){

u = runifC(seed * (i + 1), 2);  
                                    
theta = 2.0 * pi * u[0];  
r = sqrt(-2 * log(u[1])); 
    
v[2 * i] = r * cos(theta) ;  
v[(2 * i) + 1] = r * sin(theta); 
}
  
return(v);  

}

// [[Rcpp::export]]
double my_f(int x, int variance)
{
return exp(-pow(x,2)/(2*variance));
}

// [[Rcpp::export]]
double my_alpha(int x, int y, int variance=2)
{
return std::min(1.0,(my_f(y,variance)/my_f(x,variance)));
}

// [[Rcpp::export]]
arma::mat my_metropolis(arma::mat chain, int N, int T, double seed)
{
  arma::vec u1, u2;
  int y,accept;
for (int n = 0; n < N ; n++){
  int x = 0;
  for (int i = 0; i < T ; i++) {
    u1 = runifC(seed*(n+1),N);
    y=(x+1)* (u1[n+500]>0.5)+(x-1)* (u1[n+500]<=0.5);
    u2 = runifC(seed*(n+1),N);
    accept=(u2[n]<my_alpha(x,y));  
    x=y*(accept==1)+x*(accept==0);
  }
  chain[n]=x;
}
return chain;
}



// [[Rcpp::export]]
 
arma::cube my_gibbs(int T, int M, double rho, double x0, double y0, arma::cube p)
{
  double x, y;
  arma::vec z(M*T);
  z = rnormC(76543,M*T);
for (int m = 0; m < M; m++) 
{
     x = x0;
     y = y0;
     p(0,0,m)=x;
     p(1,0,m)=y;
  for (int t = 1; t < T; t++) 
{ 
    //z = rnormC(76543,M,rho,x,y);
    x = z[m*T]*sqrt(1 - pow(rho,2)) + (rho * y);
    y = z[m*T+1]*sqrt(1 - pow(rho,2)) + (rho * x);
    
    //x = rnormC(1, rho * y, sqrt(1 - pow(rho,2)));
    //y = rnormC(1, rho * x, sqrt(1 - pow(rho,2)));
    p(0,t,m)=x;
    p(1,t,m)=y;
}
}
  return p;
}
